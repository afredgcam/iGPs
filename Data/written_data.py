# make 'iGP' data setimport numpy as npfrom scipy.stats import norm,poissonimport matplotlib.pyplot as plt# plot design choicesplt.rcParams["figure.dpi"] = 500plt.rcParams['text.usetex'] = True### plotting functions #### plot all data def plot_data(data,colour,opacity=1,steps=None,indices=[]):    # get data at correct times    if steps == None:        steps = range(len(data))    # plot the data    name = 'Obs.'    if indices:        for k in steps:            plt.plot(data[k][indices,0],data[k][indices,1],c=colour,ls='',                     marker='2',label=name,alpha=opacity)            name = ''    else:        for k in steps:            plt.plot(data[k][:,0],data[k][:,1],c=colour,ls='',                     marker='2',label=name,alpha=opacity)            name = ''    return None# plot an entire trackdef plot_track(track,colour,line_style,name,mrkrs=['x','.'],               first_is_last=False):    # orient track correctly    if first_is_last:        track = track[::-1,:]    # plot (and label) the line    plt.plot(track[:,0],track[:,1],c=colour,ls=line_style,label=name)    # plot the start as an 'x'    plt.plot(track[0,0],track[0,1],c=colour,ls='',marker=mrkrs[0])    # plot the final location as a '.'    plt.plot(track[-1,0],track[-1,1],c=colour,ls='',marker=mrkrs[1])    return None# tidy and show the current plotdef tidy_plot(bounds=None,x_name='x (m)',y_name='y (m)',title='',              wanting_legend=True):    if type(bounds) != type(None):        plt.xlim(bounds[0,:])        plt.ylim(bounds[1,:])    plt.xlabel(x_name)    plt.ylabel(y_name)    plt.title(title)    if wanting_legend:        plt.legend(loc=1,framealpha=1)    plt.show()    return None########################### coloursmain_colour = 'blueviolet'# seednp.random.seed(28)# output choiceswanting_scene = Truewanting_steps = Truesaving = True# main target's track (yes, I did this by hand / eye !!)track = np.array([    [5,6,8,13,20,31,41,43,60,80,90,80,60,54,57,64,75,84,90,90,85,80,77,80,86,     92,94,97,100,108,117,120,120,120,120,120,120,125,142,156,159,149,122],    [60,39,15,7,2,10,25,55,90,95,93,89,70,39,14,8,2,12,21,25,26,27,28,29,30,31,     24,17,9,1,3,15,33,51,69,84,92,92,88,81,70,62,57]    ]).T# viewing windowpadding = 0.2VW = np.array([track.min(0), track.max(0)]).TVW[:,1] = VW[:,0] + (1 + padding) * (VW[:,1] - VW[:,0])VW[:,0] = VW[:,1] - (1 + 2*padding)/(1 + padding) * (VW[:,1] - VW[:,0])dists = VW[:,1] - VW[:,0]nat_aspect = dists[0] / dists[1]aspect = 5 * np.array([nat_aspect,1])plt.rcParams["figure.figsize"] = aspect# observation hyperparametersarea = (VW[:,1] - VW[:,0]).prod()clutter_intensity = 1e-4µ0 = clutter_intensity * areaµ1 = 4sy = 2# make dataTmax = track.shape[0]data,associations = [],[]for k in range(Tmax):    n0k,n1k = poisson.rvs(µ0),poisson.rvs(µ1)    associations.append(np.append(np.zeros(n0k),np.ones(n1k)))    data_0k = dists * np.random.random_sample([n0k,2]) + VW[:,0]    data_1k = norm.rvs(track[k,:],sy**0.5,size=[n1k,2])    data.append(np.vstack([data_0k,data_1k]))# plot track sequentiallyif wanting_steps:    for k in range(Tmax):        plot_data(data,'k',0.2,[k])        plot_track(track[max(k-5,0):k+1],main_colour,'-','Target')        tidy_plot(VW)      # plot sceneif wanting_scene:    plot_data(data,'k',0.2)    plot_track(track,main_colour,'-','Target')    tidy_plot(VW)    # save all (except plots)if saving:    obs_pars = np.array([µ0,µ1,sy,clutter_intensity,area])    np.savez('written.npz',data=np.array(data,object),track=track,VW=VW,             hyperparameters=obs_pars,             associations=np.array(associations,object))